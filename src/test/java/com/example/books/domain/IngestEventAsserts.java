package com.example.books.domain;

import static com.example.books.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class IngestEventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestEventAllPropertiesEquals(IngestEvent expected, IngestEvent actual) {
        assertIngestEventAutoGeneratedPropertiesEquals(expected, actual);
        assertIngestEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestEventAllUpdatablePropertiesEquals(IngestEvent expected, IngestEvent actual) {
        assertIngestEventUpdatableFieldsEquals(expected, actual);
        assertIngestEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestEventAutoGeneratedPropertiesEquals(IngestEvent expected, IngestEvent actual) {
        assertThat(actual)
            .as("Verify IngestEvent auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestEventUpdatableFieldsEquals(IngestEvent expected, IngestEvent actual) {
        assertThat(actual)
            .as("Verify IngestEvent relevant properties")
            .satisfies(a -> assertThat(a.getRunId()).as("check runId").isEqualTo(expected.getRunId()))
            .satisfies(a -> assertThat(a.getDocumentId()).as("check documentId").isEqualTo(expected.getDocumentId()))
            .satisfies(a -> assertThat(a.getTopic()).as("check topic").isEqualTo(expected.getTopic()))
            .satisfies(a -> assertThat(a.getPayload()).as("check payload").isEqualTo(expected.getPayload()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestEventUpdatableRelationshipsEquals(IngestEvent expected, IngestEvent actual) {
        assertThat(actual)
            .as("Verify IngestEvent relationships")
            .satisfies(a -> assertThat(a.getIngestRun()).as("check ingestRun").isEqualTo(expected.getIngestRun()));
    }
}
