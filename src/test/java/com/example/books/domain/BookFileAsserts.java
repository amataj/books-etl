package com.example.books.domain;

import static com.example.books.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class BookFileAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookFileAllPropertiesEquals(BookFile expected, BookFile actual) {
        assertBookFileAutoGeneratedPropertiesEquals(expected, actual);
        assertBookFileAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookFileAllUpdatablePropertiesEquals(BookFile expected, BookFile actual) {
        assertBookFileUpdatableFieldsEquals(expected, actual);
        assertBookFileUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookFileAutoGeneratedPropertiesEquals(BookFile expected, BookFile actual) {
        assertThat(actual)
            .as("Verify BookFile auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookFileUpdatableFieldsEquals(BookFile expected, BookFile actual) {
        assertThat(actual)
            .as("Verify BookFile relevant properties")
            .satisfies(a -> assertThat(a.getPathNorm()).as("check pathNorm").isEqualTo(expected.getPathNorm()))
            .satisfies(a -> assertThat(a.getSha256()).as("check sha256").isEqualTo(expected.getSha256()))
            .satisfies(a -> assertThat(a.getSizeBytes()).as("check sizeBytes").isEqualTo(expected.getSizeBytes()))
            .satisfies(a ->
                assertThat(a.getMtime()).as("check mtime").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getMtime())
            )
            .satisfies(a -> assertThat(a.getStorageUri()).as("check storageUri").isEqualTo(expected.getStorageUri()))
            .satisfies(a ->
                assertThat(a.getFirstSeenAt())
                    .as("check firstSeenAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getFirstSeenAt())
            )
            .satisfies(a ->
                assertThat(a.getLastSeenAt())
                    .as("check lastSeenAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getLastSeenAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBookFileUpdatableRelationshipsEquals(BookFile expected, BookFile actual) {
        assertThat(actual)
            .as("Verify BookFile relationships")
            .satisfies(a -> assertThat(a.getBook()).as("check book").isEqualTo(expected.getBook()));
    }
}
