package com.example.books.domain;

import static com.example.books.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class IngestRunAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestRunAllPropertiesEquals(IngestRun expected, IngestRun actual) {
        assertIngestRunAutoGeneratedPropertiesEquals(expected, actual);
        assertIngestRunAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestRunAllUpdatablePropertiesEquals(IngestRun expected, IngestRun actual) {
        assertIngestRunUpdatableFieldsEquals(expected, actual);
        assertIngestRunUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestRunAutoGeneratedPropertiesEquals(IngestRun expected, IngestRun actual) {
        assertThat(actual)
            .as("Verify IngestRun auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestRunUpdatableFieldsEquals(IngestRun expected, IngestRun actual) {
        assertThat(actual)
            .as("Verify IngestRun relevant properties")
            .satisfies(a ->
                assertThat(a.getStartedAt())
                    .as("check startedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getStartedAt())
            )
            .satisfies(a ->
                assertThat(a.getFinishedAt())
                    .as("check finishedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getFinishedAt())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getFilesSeen()).as("check filesSeen").isEqualTo(expected.getFilesSeen()))
            .satisfies(a -> assertThat(a.getFilesParsed()).as("check filesParsed").isEqualTo(expected.getFilesParsed()))
            .satisfies(a -> assertThat(a.getFilesFailed()).as("check filesFailed").isEqualTo(expected.getFilesFailed()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIngestRunUpdatableRelationshipsEquals(IngestRun expected, IngestRun actual) {
        // empty method
    }
}
